{
  "version": 3,
  "sources": ["../../node-fetch/browser.js", "../../compute-rhino3d/compute.rhino3d.js"],
  "sourcesContent": ["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n", "var RhinoCompute = {\r\n  version: '0.13.0-beta',\r\n  url: 'https://compute.rhino3d.com/',\r\n  authToken: null,\r\n  apiKey: null,\r\n\r\n  getAuthToken: function (useLocalStorage=true) {\r\n    let auth = null\r\n    if (useLocalStorage)\r\n      auth = localStorage['compute_auth']\r\n    if (auth == null) {\r\n      auth = window.prompt('Rhino Accounts auth token\\nVisit https://www.rhino3d.com/compute/login')\r\n      if (auth != null && auth.length>20) {\r\n        auth = 'Bearer ' + auth\r\n        localStorage.setItem('compute_auth', auth)\r\n      }\r\n    }\r\n    return auth\r\n  },\r\n\r\n  computeFetch: function(endpoint, arglist, returnJson=true) {\r\n    let request = {\r\n      'method':'POST',\r\n      'body': JSON.stringify(arglist),\r\n      'headers': {'User-Agent': `compute.rhino3d.js/${RhinoCompute.version}`}\r\n    }\r\n    if (RhinoCompute.authToken) {\r\n      request.headers['Authorization'] = RhinoCompute.authToken\r\n    }\r\n    if (RhinoCompute.apiKey) {\r\n      request.headers['RhinoComputeKey'] = RhinoCompute.apiKey\r\n    }\r\n\r\n    let p = fetch(RhinoCompute.url+endpoint, request)\r\n    if (returnJson) return p.then(r=>r.json())\r\n    return p\r\n  },\r\n\r\n  Grasshopper: {\r\n    DataTree: class {\r\n      constructor (name) {\r\n        this.data = { 'ParamName': name, 'InnerTree': {} }\r\n      }\r\n      /**\r\n       * Append a path to this tree\r\n       * @param path (arr): a list of integers defining a path\r\n       * @param items (arr): list of data to add to the tree\r\n       */\r\n      append (path, items) {\r\n        let key = path.join(';')\r\n        let innerTreeData = []\r\n        items.forEach(item => {\r\n          innerTreeData.push({ 'data': item })\r\n        })\r\n        this.data.InnerTree[key] = innerTreeData\r\n      }\r\n    },\r\n    /**\r\n     * Evaluate a grasshopper definition\r\n     * @param definition (str|bytearray) contents of .gh/.ghx file or\r\n     *   url pointing to a grasshopper definition file\r\n     * @param trees (arr) list of DataTree instances\r\n     * @param returnJson (bool) if true, return a Promise with json data\r\n     *   otherwise a Promise with Response data\r\n     */\r\n    evaluateDefinition : function (definition, trees, returnJson=true) {\r\n      let args = {\r\n        'algo': null,\r\n        'pointer': null,\r\n        'values': null\r\n      }\r\n      if (definition.constructor === Uint8Array) {\r\n        args['algo'] = base64ByteArray(definition)\r\n      } else {\r\n        if (definition.startsWith('http')) {\r\n          args['pointer'] = definition\r\n        } else {\r\n          args['algo'] = btoa(definition)\r\n        }\r\n      }\r\n\r\n      let values = []\r\n      trees.forEach(tree => {\r\n        values.push(tree.data)\r\n      })\r\n      args['values'] = values\r\n\r\n      return RhinoCompute.computeFetch('grasshopper', args, returnJson)\r\n    }\r\n  },\r\n\r\n  zipArgs: function(multiple, ...args) {\r\n    if (!multiple) return args\r\n\r\n    if (args.length==1)\r\n      return args[0].map(function(_,i) { return [args[0][i]] })\r\n    if (args.length==2)\r\n      return args[0].map(function(_,i) { return [args[0][i],args[1][i]] })\r\n    if (args.length==3)\r\n      return args[0].map(function(_,i) {\r\n        return [args[0][i],args[1][i],args[2][i]] }\r\n      )\r\n    if (args.length==4)\r\n      return args[0].map(function(_,i) {\r\n        return [args[0][i],args[1][i],args[2][i],args[3][i]] }\r\n      )\r\n    if (args.length==5)\r\n      return args[0].map(function(_,i) {\r\n        return [args[0][i],args[1][i],args[2][i],args[3][i],args[4][i]] }\r\n      )\r\n    if (args.length==6)\r\n      return args[0].map(function(_,i) {\r\n        return [args[0][i],args[1][i],args[2][i],args[3][i],args[4][i],args[5][i]] }\r\n      )\r\n    if (args.length==7)\r\n      return args[0].map(function(_,i) {\r\n        return [args[0][i],args[1][i],args[2][i],args[3][i],args[4][i],args[5][i],args[6][i]] }\r\n      )\r\n    return args[0].map(function(_,i) {\r\n      return [args[0][i],args[1][i],args[2][i],args[3][i],args[4][i],args[5][i],args[6][i],args[7][i]] }\r\n    )\r\n  },\r\n\r\n  Extrusion : {\r\n    getWireframe : function(extrusion, multiple=false) {\r\n      let url='rhino/geometry/extrusion/getwireframe-extrusion'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, extrusion)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n  },\r\n\r\n  BezierCurve : {\r\n    createCubicBeziers : function(sourceCurve, distanceTolerance, kinkTolerance, multiple=false) {\r\n      let url='rhino/geometry/beziercurve/createcubicbeziers-curve_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, sourceCurve, distanceTolerance, kinkTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBeziers : function(sourceCurve, multiple=false) {\r\n      let url='rhino/geometry/beziercurve/createbeziers-curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, sourceCurve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n  },\r\n\r\n  Brep : {\r\n    changeSeam : function(face, direction, parameter, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/changeseam-brepface_int_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, face, direction, parameter, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    copyTrimCurves : function(trimSource, surfaceSource, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/copytrimcurves-brepface_surface_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, trimSource, surfaceSource, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBaseballSphere : function(center, radius, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createbaseballsphere-point3d_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, center, radius, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createDevelopableLoft : function(crv0, crv1, reverse0, reverse1, density, multiple=false) {\r\n      let url='rhino/geometry/brep/createdevelopableloft-curve_curve_bool_bool_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, crv0, crv1, reverse0, reverse1, density)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createDevelopableLoft1 : function(rail0, rail1, fixedRulings, multiple=false) {\r\n      let url='rhino/geometry/brep/createdevelopableloft-nurbscurve_nurbscurve_point2darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail0, rail1, fixedRulings)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPlanarBreps : function(inputLoops, multiple=false) {\r\n      let url='rhino/geometry/brep/createplanarbreps-curvearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, inputLoops)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPlanarBreps1 : function(inputLoops, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createplanarbreps-curvearray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, inputLoops, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPlanarBreps2 : function(inputLoop, multiple=false) {\r\n      let url='rhino/geometry/brep/createplanarbreps-curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, inputLoop)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPlanarBreps3 : function(inputLoop, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createplanarbreps-curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, inputLoop, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createTrimmedSurface : function(trimSource, surfaceSource, multiple=false) {\r\n      let url='rhino/geometry/brep/createtrimmedsurface-brepface_surface'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, trimSource, surfaceSource)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createTrimmedSurface1 : function(trimSource, surfaceSource, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createtrimmedsurface-brepface_surface_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, trimSource, surfaceSource, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCornerPoints : function(corner1, corner2, corner3, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromcornerpoints-point3d_point3d_point3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, corner1, corner2, corner3, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCornerPoints1 : function(corner1, corner2, corner3, corner4, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromcornerpoints-point3d_point3d_point3d_point3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, corner1, corner2, corner3, corner4, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createEdgeSurface : function(curves, multiple=false) {\r\n      let url='rhino/geometry/brep/createedgesurface-curvearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPlanarBreps4 : function(inputLoops, multiple=false) {\r\n      let url='rhino/geometry/brep/createplanarbreps-rhino.collections.curvelist'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, inputLoops)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPlanarBreps5 : function(inputLoops, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createplanarbreps-rhino.collections.curvelist_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, inputLoops, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromOffsetFace : function(face, offsetDistance, offsetTolerance, bothSides, createSolid, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromoffsetface-brepface_double_double_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, face, offsetDistance, offsetTolerance, bothSides, createSolid)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createSolid : function(breps, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createsolid-breparray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, breps, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    mergeSurfaces : function(surface0, surface1, tolerance, angleToleranceRadians, multiple=false) {\r\n      let url='rhino/geometry/brep/mergesurfaces-surface_surface_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface0, surface1, tolerance, angleToleranceRadians)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    mergeSurfaces1 : function(brep0, brep1, tolerance, angleToleranceRadians, multiple=false) {\r\n      let url='rhino/geometry/brep/mergesurfaces-brep_brep_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep0, brep1, tolerance, angleToleranceRadians)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    mergeSurfaces2 : function(brep0, brep1, tolerance, angleToleranceRadians, point0, point1, roundness, smooth, multiple=false) {\r\n      let url='rhino/geometry/brep/mergesurfaces-brep_brep_double_double_point2d_point2d_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep0, brep1, tolerance, angleToleranceRadians, point0, point1, roundness, smooth)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPatch : function(geometry, startingSurface, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createpatch-geometrybasearray_surface_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, geometry, startingSurface, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPatch1 : function(geometry, uSpans, vSpans, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createpatch-geometrybasearray_int_int_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, geometry, uSpans, vSpans, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPatch2 : function(geometry, startingSurface, uSpans, vSpans, trim, tangency, pointSpacing, flexibility, surfacePull, fixEdges, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createpatch-geometrybasearray_surface_int_int_bool_bool_double_double_double_boolarray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, geometry, startingSurface, uSpans, vSpans, trim, tangency, pointSpacing, flexibility, surfacePull, fixEdges, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPipe : function(rail, radius, localBlending, cap, fitRail, absoluteTolerance, angleToleranceRadians, multiple=false) {\r\n      let url='rhino/geometry/brep/createpipe-curve_double_bool_pipecapmode_bool_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail, radius, localBlending, cap, fitRail, absoluteTolerance, angleToleranceRadians)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPipe1 : function(rail, railRadiiParameters, radii, localBlending, cap, fitRail, absoluteTolerance, angleToleranceRadians, multiple=false) {\r\n      let url='rhino/geometry/brep/createpipe-curve_doublearray_doublearray_bool_pipecapmode_bool_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail, railRadiiParameters, radii, localBlending, cap, fitRail, absoluteTolerance, angleToleranceRadians)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createThickPipe : function(rail, radius0, radius1, localBlending, cap, fitRail, absoluteTolerance, angleToleranceRadians, multiple=false) {\r\n      let url='rhino/geometry/brep/createthickpipe-curve_double_double_bool_pipecapmode_bool_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail, radius0, radius1, localBlending, cap, fitRail, absoluteTolerance, angleToleranceRadians)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createThickPipe1 : function(rail, railRadiiParameters, radii0, radii1, localBlending, cap, fitRail, absoluteTolerance, angleToleranceRadians, multiple=false) {\r\n      let url='rhino/geometry/brep/createthickpipe-curve_doublearray_doublearray_doublearray_bool_pipecapmode_bool_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail, railRadiiParameters, radii0, radii1, localBlending, cap, fitRail, absoluteTolerance, angleToleranceRadians)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSweep : function(rail, shape, closed, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromsweep-curve_curve_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail, shape, closed, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSweep1 : function(rail, shapes, closed, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromsweep-curve_curvearray_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail, shapes, closed, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSweep2 : function(rail, shapes, startPoint, endPoint, frameType, roadlikeNormal, closed, blendType, miterType, tolerance, rebuildType, rebuildPointCount, refitTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromsweep-curve_curvearray_point3d_point3d_sweepframe_vector3d_bool_sweepblend_sweepmiter_double_sweeprebuild_int_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail, shapes, startPoint, endPoint, frameType, roadlikeNormal, closed, blendType, miterType, tolerance, rebuildType, rebuildPointCount, refitTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSweepSegmented : function(rail, shape, closed, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromsweepsegmented-curve_curve_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail, shape, closed, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSweepSegmented1 : function(rail, shapes, closed, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromsweepsegmented-curve_curvearray_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail, shapes, closed, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSweepSegmented2 : function(rail, shapes, startPoint, endPoint, frameType, roadlikeNormal, closed, blendType, miterType, tolerance, rebuildType, rebuildPointCount, refitTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromsweepsegmented-curve_curvearray_point3d_point3d_sweepframe_vector3d_bool_sweepblend_sweepmiter_double_sweeprebuild_int_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail, shapes, startPoint, endPoint, frameType, roadlikeNormal, closed, blendType, miterType, tolerance, rebuildType, rebuildPointCount, refitTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSweep3 : function(rail1, rail2, shape, closed, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromsweep-curve_curve_curve_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail1, rail2, shape, closed, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSweep4 : function(rail1, rail2, shapes, closed, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromsweep-curve_curve_curvearray_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail1, rail2, shapes, closed, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSweep5 : function(rail1, rail2, shapes, start, end, closed, tolerance, rebuild, rebuildPointCount, refitTolerance, preserveHeight, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromsweep-curve_curve_curvearray_point3d_point3d_bool_double_sweeprebuild_int_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail1, rail2, shapes, start, end, closed, tolerance, rebuild, rebuildPointCount, refitTolerance, preserveHeight)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSweepInParts : function(rail1, rail2, shapes, rail_params, closed, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromsweepinparts-curve_curve_curvearray_point2darray_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail1, rail2, shapes, rail_params, closed, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromTaperedExtrude : function(curveToExtrude, distance, direction, basePoint, draftAngleRadians, cornerType, tolerance, angleToleranceRadians, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromtaperedextrude-curve_double_vector3d_point3d_double_extrudecornertype_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveToExtrude, distance, direction, basePoint, draftAngleRadians, cornerType, tolerance, angleToleranceRadians)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromTaperedExtrude1 : function(curveToExtrude, distance, direction, basePoint, draftAngleRadians, cornerType, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromtaperedextrude-curve_double_vector3d_point3d_double_extrudecornertype'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveToExtrude, distance, direction, basePoint, draftAngleRadians, cornerType)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromTaperedExtrudeWithRef : function(curve, direction, distance, draftAngle, plane, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromtaperedextrudewithref-curve_vector3d_double_double_plane_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, direction, distance, draftAngle, plane, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBlendSurface : function(face0, edge0, domain0, rev0, continuity0, face1, edge1, domain1, rev1, continuity1, multiple=false) {\r\n      let url='rhino/geometry/brep/createblendsurface-brepface_brepedge_interval_bool_blendcontinuity_brepface_brepedge_interval_bool_blendcontinuity'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, face0, edge0, domain0, rev0, continuity0, face1, edge1, domain1, rev1, continuity1)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBlendShape : function(face0, edge0, t0, rev0, continuity0, face1, edge1, t1, rev1, continuity1, multiple=false) {\r\n      let url='rhino/geometry/brep/createblendshape-brepface_brepedge_double_bool_blendcontinuity_brepface_brepedge_double_bool_blendcontinuity'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, face0, edge0, t0, rev0, continuity0, face1, edge1, t1, rev1, continuity1)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFilletSurface : function(face0, uv0, face1, uv1, radius, extend, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfilletsurface-brepface_point2d_brepface_point2d_double_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, face0, uv0, face1, uv1, radius, extend, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFilletSurface1 : function(face0, uv0, face1, uv1, radius, trim, extend, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfilletsurface-brepface_point2d_brepface_point2d_double_bool_bool_double_breparray_breparray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, face0, uv0, face1, uv1, radius, trim, extend, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createChamferSurface : function(face0, uv0, radius0, face1, uv1, radius1, extend, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createchamfersurface-brepface_point2d_double_brepface_point2d_double_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, face0, uv0, radius0, face1, uv1, radius1, extend, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createChamferSurface1 : function(face0, uv0, radius0, face1, uv1, radius1, trim, extend, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createchamfersurface-brepface_point2d_double_brepface_point2d_double_bool_bool_double_breparray_breparray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, face0, uv0, radius0, face1, uv1, radius1, trim, extend, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFilletEdges : function(brep, edgeIndices, startRadii, endRadii, blendType, railType, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfilletedges-brep_intarray_doublearray_doublearray_blendtype_railtype_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, edgeIndices, startRadii, endRadii, blendType, railType, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createOffsetBrep : function(brep, distance, solid, extend, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createoffsetbrep-brep_double_bool_bool_double_breparray_breparray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, distance, solid, extend, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    removeFins : function(brep, multiple=false) {\r\n      let url='rhino/geometry/brep/removefins-brep'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromJoinedEdges : function(brep0, edgeIndex0, brep1, edgeIndex1, joinTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromjoinededges-brep_int_brep_int_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep0, edgeIndex0, brep1, edgeIndex1, joinTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromLoft : function(curves, start, end, loftType, closed, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromloft-curvearray_point3d_point3d_lofttype_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves, start, end, loftType, closed)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromLoftRebuild : function(curves, start, end, loftType, closed, rebuildPointCount, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromloftrebuild-curvearray_point3d_point3d_lofttype_bool_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves, start, end, loftType, closed, rebuildPointCount)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromLoftRefit : function(curves, start, end, loftType, closed, refitTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromloftrefit-curvearray_point3d_point3d_lofttype_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves, start, end, loftType, closed, refitTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromLoft1 : function(curves, start, end, StartTangent, EndTangent, StartTrim, EndTrim, loftType, closed, multiple=false) {\r\n      let url='rhino/geometry/brep/createfromloft-curvearray_point3d_point3d_bool_bool_breptrim_breptrim_lofttype_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves, start, end, StartTangent, EndTangent, StartTrim, EndTrim, loftType, closed)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPlanarUnion : function(breps, plane, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createplanarunion-breparray_plane_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, breps, plane, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPlanarUnion1 : function(b0, b1, plane, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createplanarunion-brep_brep_plane_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, b0, b1, plane, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPlanarDifference : function(b0, b1, plane, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createplanardifference-brep_brep_plane_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, b0, b1, plane, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPlanarIntersection : function(b0, b1, plane, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createplanarintersection-brep_brep_plane_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, b0, b1, plane, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanUnion : function(breps, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createbooleanunion-breparray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, breps, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanUnion1 : function(breps, tolerance, manifoldOnly, multiple=false) {\r\n      let url='rhino/geometry/brep/createbooleanunion-breparray_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, breps, tolerance, manifoldOnly)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanIntersection : function(firstSet, secondSet, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createbooleanintersection-breparray_breparray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, firstSet, secondSet, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanIntersection1 : function(firstSet, secondSet, tolerance, manifoldOnly, multiple=false) {\r\n      let url='rhino/geometry/brep/createbooleanintersection-breparray_breparray_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, firstSet, secondSet, tolerance, manifoldOnly)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanIntersection2 : function(firstBrep, secondBrep, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createbooleanintersection-brep_brep_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, firstBrep, secondBrep, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanIntersection3 : function(firstBrep, secondBrep, tolerance, manifoldOnly, multiple=false) {\r\n      let url='rhino/geometry/brep/createbooleanintersection-brep_brep_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, firstBrep, secondBrep, tolerance, manifoldOnly)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanDifference : function(firstSet, secondSet, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createbooleandifference-breparray_breparray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, firstSet, secondSet, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanDifference1 : function(firstSet, secondSet, tolerance, manifoldOnly, multiple=false) {\r\n      let url='rhino/geometry/brep/createbooleandifference-breparray_breparray_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, firstSet, secondSet, tolerance, manifoldOnly)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanDifference2 : function(firstBrep, secondBrep, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createbooleandifference-brep_brep_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, firstBrep, secondBrep, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanDifference3 : function(firstBrep, secondBrep, tolerance, manifoldOnly, multiple=false) {\r\n      let url='rhino/geometry/brep/createbooleandifference-brep_brep_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, firstBrep, secondBrep, tolerance, manifoldOnly)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanSplit : function(firstBrep, secondBrep, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createbooleansplit-brep_brep_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, firstBrep, secondBrep, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanSplit1 : function(firstSet, secondSet, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createbooleansplit-breparray_breparray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, firstSet, secondSet, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createShell : function(brep, facesToRemove, distance, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/createshell-brep_intarray_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, facesToRemove, distance, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    joinBreps : function(brepsToJoin, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/joinbreps-breparray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepsToJoin, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    mergeBreps : function(brepsToMerge, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/mergebreps-breparray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepsToMerge, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createContourCurves : function(brepToContour, contourStart, contourEnd, interval, multiple=false) {\r\n      let url='rhino/geometry/brep/createcontourcurves-brep_point3d_point3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepToContour, contourStart, contourEnd, interval)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createContourCurves1 : function(brepToContour, sectionPlane, multiple=false) {\r\n      let url='rhino/geometry/brep/createcontourcurves-brep_plane'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepToContour, sectionPlane)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createCurvatureAnalysisMesh : function(brep, state, multiple=false) {\r\n      let url='rhino/geometry/brep/createcurvatureanalysismesh-brep_rhino.applicationsettings.curvatureanalysissettingsstate'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, state)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getRegions : function(brep, multiple=false) {\r\n      let url='rhino/geometry/brep/getregions-brep'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getWireframe : function(brep, density, multiple=false) {\r\n      let url='rhino/geometry/brep/getwireframe-brep_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, density)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    closestPoint : function(brep, testPoint, multiple=false) {\r\n      let url='rhino/geometry/brep/closestpoint-brep_point3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, testPoint)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    isPointInside : function(brep, point, tolerance, strictlyIn, multiple=false) {\r\n      let url='rhino/geometry/brep/ispointinside-brep_point3d_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, point, tolerance, strictlyIn)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getPointInside : function(brep, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/getpointinside-brep_double_point3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    capPlanarHoles : function(brep, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/capplanarholes-brep_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    join : function(brep, otherBrep, tolerance, compact, multiple=false) {\r\n      let url='rhino/geometry/brep/join-brep_brep_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, otherBrep, tolerance, compact)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    joinNakedEdges : function(brep, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/joinnakededges-brep_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    mergeCoplanarFaces : function(brep, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/mergecoplanarfaces-brep_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    mergeCoplanarFaces1 : function(brep, tolerance, angleTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/mergecoplanarfaces-brep_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, tolerance, angleTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split : function(brep, cutter, intersectionTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/split-brep_brep_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, cutter, intersectionTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split1 : function(brep, cutter, intersectionTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/split-brep_brep_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, cutter, intersectionTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split2 : function(brep, cutters, intersectionTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/split-brep_breparray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, cutters, intersectionTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split3 : function(brep, cutters, intersectionTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/split-brep_curvearray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, cutters, intersectionTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split4 : function(brep, cutters, normal, planView, intersectionTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/split-brep_geometrybasearray_vector3d_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, cutters, normal, planView, intersectionTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    trim : function(brep, cutter, intersectionTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/trim-brep_brep_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, cutter, intersectionTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    trim1 : function(brep, cutter, intersectionTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/trim-brep_plane_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, cutter, intersectionTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    unjoinEdges : function(brep, edgesToUnjoin, multiple=false) {\r\n      let url='rhino/geometry/brep/unjoinedges-brep_intarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, edgesToUnjoin)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    joinEdges : function(brep, edgeIndex0, edgeIndex1, joinTolerance, compact, multiple=false) {\r\n      let url='rhino/geometry/brep/joinedges-brep_int_int_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, edgeIndex0, edgeIndex1, joinTolerance, compact)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    transformComponent : function(brep, components, xform, tolerance, timeLimit, useMultipleThreads, multiple=false) {\r\n      let url='rhino/geometry/brep/transformcomponent-brep_componentindexarray_transform_double_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, components, xform, tolerance, timeLimit, useMultipleThreads)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getArea : function(brep, multiple=false) {\r\n      let url='rhino/geometry/brep/getarea-brep'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getArea1 : function(brep, relativeTolerance, absoluteTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/getarea-brep_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, relativeTolerance, absoluteTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getVolume : function(brep, multiple=false) {\r\n      let url='rhino/geometry/brep/getvolume-brep'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getVolume1 : function(brep, relativeTolerance, absoluteTolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/getvolume-brep_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, relativeTolerance, absoluteTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    rebuildTrimsForV2 : function(brep, face, nurbsSurface, multiple=false) {\r\n      let url='rhino/geometry/brep/rebuildtrimsforv2-brep_brepface_nurbssurface'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, face, nurbsSurface)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    makeValidForV2 : function(brep, multiple=false) {\r\n      let url='rhino/geometry/brep/makevalidforv2-brep'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    repair : function(brep, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/repair-brep_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    removeHoles : function(brep, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/removeholes-brep_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    removeHoles1 : function(brep, loops, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brep/removeholes-brep_componentindexarray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, loops, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n  },\r\n\r\n  BrepFace : {\r\n    pullPointsToFace : function(brepface, points, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brepface/pullpointstoface-brepface_point3darray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepface, points, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    draftAnglePoint : function(brepface, testPoint, testAngle, pullDirection, edge, multiple=false) {\r\n      let url='rhino/geometry/brepface/draftanglepoint-brepface_point2d_double_vector3d_bool_point3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepface, testPoint, testAngle, pullDirection, edge)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    removeHoles : function(brepface, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brepface/removeholes-brepface_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepface, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    shrinkSurfaceToEdge : function(brepface, multiple=false) {\r\n      let url='rhino/geometry/brepface/shrinksurfacetoedge-brepface'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepface)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split : function(brepface, curves, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brepface/split-brepface_curvearray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepface, curves, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    isPointOnFace : function(brepface, u, v, multiple=false) {\r\n      let url='rhino/geometry/brepface/ispointonface-brepface_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepface, u, v)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    isPointOnFace1 : function(brepface, u, v, tolerance, multiple=false) {\r\n      let url='rhino/geometry/brepface/ispointonface-brepface_double_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepface, u, v, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    trimAwareIsoIntervals : function(brepface, direction, constantParameter, multiple=false) {\r\n      let url='rhino/geometry/brepface/trimawareisointervals-brepface_int_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepface, direction, constantParameter)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    trimAwareIsoCurve : function(brepface, direction, constantParameter, multiple=false) {\r\n      let url='rhino/geometry/brepface/trimawareisocurve-brepface_int_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepface, direction, constantParameter)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    changeSurface : function(brepface, surfaceIndex, multiple=false) {\r\n      let url='rhino/geometry/brepface/changesurface-brepface_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepface, surfaceIndex)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    rebuildEdges : function(brepface, tolerance, rebuildSharedEdges, rebuildVertices, multiple=false) {\r\n      let url='rhino/geometry/brepface/rebuildedges-brepface_double_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepface, tolerance, rebuildSharedEdges, rebuildVertices)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n  },\r\n\r\n  Curve : {\r\n    getConicSectionType : function(curve, multiple=false) {\r\n      let url='rhino/geometry/curve/getconicsectiontype-curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createInterpolatedCurve : function(points, degree, multiple=false) {\r\n      let url='rhino/geometry/curve/createinterpolatedcurve-point3darray_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, points, degree)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createInterpolatedCurve1 : function(points, degree, knots, multiple=false) {\r\n      let url='rhino/geometry/curve/createinterpolatedcurve-point3darray_int_curveknotstyle'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, points, degree, knots)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createInterpolatedCurve2 : function(points, degree, knots, startTangent, endTangent, multiple=false) {\r\n      let url='rhino/geometry/curve/createinterpolatedcurve-point3darray_int_curveknotstyle_vector3d_vector3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, points, degree, knots, startTangent, endTangent)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createSoftEditCurve : function(curve, t, delta, length, fixEnds, multiple=false) {\r\n      let url='rhino/geometry/curve/createsofteditcurve-curve_double_vector3d_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, t, delta, length, fixEnds)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFilletCornersCurve : function(curve, radius, tolerance, angleTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/createfilletcornerscurve-curve_double_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, radius, tolerance, angleTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createArcBlend : function(startPt, startDir, endPt, endDir, controlPointLengthRatio, multiple=false) {\r\n      let url='rhino/geometry/curve/createarcblend-point3d_vector3d_point3d_vector3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, startPt, startDir, endPt, endDir, controlPointLengthRatio)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createMeanCurve : function(curveA, curveB, angleToleranceRadians, multiple=false) {\r\n      let url='rhino/geometry/curve/createmeancurve-curve_curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB, angleToleranceRadians)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createMeanCurve1 : function(curveA, curveB, multiple=false) {\r\n      let url='rhino/geometry/curve/createmeancurve-curve_curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBlendCurve : function(curveA, curveB, continuity, multiple=false) {\r\n      let url='rhino/geometry/curve/createblendcurve-curve_curve_blendcontinuity'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB, continuity)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBlendCurve1 : function(curveA, curveB, continuity, bulgeA, bulgeB, multiple=false) {\r\n      let url='rhino/geometry/curve/createblendcurve-curve_curve_blendcontinuity_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB, continuity, bulgeA, bulgeB)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBlendCurve2 : function(curve0, t0, reverse0, continuity0, curve1, t1, reverse1, continuity1, multiple=false) {\r\n      let url='rhino/geometry/curve/createblendcurve-curve_double_bool_blendcontinuity_curve_double_bool_blendcontinuity'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve0, t0, reverse0, continuity0, curve1, t1, reverse1, continuity1)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createTweenCurves : function(curve0, curve1, numCurves, multiple=false) {\r\n      let url='rhino/geometry/curve/createtweencurves-curve_curve_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve0, curve1, numCurves)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createTweenCurves1 : function(curve0, curve1, numCurves, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/createtweencurves-curve_curve_int_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve0, curve1, numCurves, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createTweenCurvesWithMatching : function(curve0, curve1, numCurves, multiple=false) {\r\n      let url='rhino/geometry/curve/createtweencurveswithmatching-curve_curve_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve0, curve1, numCurves)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createTweenCurvesWithMatching1 : function(curve0, curve1, numCurves, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/createtweencurveswithmatching-curve_curve_int_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve0, curve1, numCurves, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createTweenCurvesWithSampling : function(curve0, curve1, numCurves, numSamples, multiple=false) {\r\n      let url='rhino/geometry/curve/createtweencurveswithsampling-curve_curve_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve0, curve1, numCurves, numSamples)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createTweenCurvesWithSampling1 : function(curve0, curve1, numCurves, numSamples, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/createtweencurveswithsampling-curve_curve_int_int_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve0, curve1, numCurves, numSamples, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    joinCurves : function(inputCurves, multiple=false) {\r\n      let url='rhino/geometry/curve/joincurves-curvearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, inputCurves)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    joinCurves1 : function(inputCurves, joinTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/joincurves-curvearray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, inputCurves, joinTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    joinCurves2 : function(inputCurves, joinTolerance, preserveDirection, multiple=false) {\r\n      let url='rhino/geometry/curve/joincurves-curvearray_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, inputCurves, joinTolerance, preserveDirection)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    makeEndsMeet : function(curveA, adjustStartCurveA, curveB, adjustStartCurveB, multiple=false) {\r\n      let url='rhino/geometry/curve/makeendsmeet-curve_bool_curve_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, adjustStartCurveA, curveB, adjustStartCurveB)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFillet : function(curve0, curve1, radius, t0Base, t1Base, multiple=false) {\r\n      let url='rhino/geometry/curve/createfillet-curve_curve_double_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve0, curve1, radius, t0Base, t1Base)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFilletCurves : function(curve0, point0, curve1, point1, radius, join, trim, arcExtension, tolerance, angleTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/createfilletcurves-curve_point3d_curve_point3d_double_bool_bool_bool_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve0, point0, curve1, point1, radius, join, trim, arcExtension, tolerance, angleTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanUnion : function(curves, multiple=false) {\r\n      let url='rhino/geometry/curve/createbooleanunion-curvearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanUnion1 : function(curves, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/createbooleanunion-curvearray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanIntersection : function(curveA, curveB, multiple=false) {\r\n      let url='rhino/geometry/curve/createbooleanintersection-curve_curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanIntersection1 : function(curveA, curveB, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/createbooleanintersection-curve_curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanDifference : function(curveA, curveB, multiple=false) {\r\n      let url='rhino/geometry/curve/createbooleandifference-curve_curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanDifference1 : function(curveA, curveB, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/createbooleandifference-curve_curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanDifference2 : function(curveA, subtractors, multiple=false) {\r\n      let url='rhino/geometry/curve/createbooleandifference-curve_curvearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, subtractors)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanDifference3 : function(curveA, subtractors, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/createbooleandifference-curve_curvearray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, subtractors, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanRegions : function(curves, plane, points, combineRegions, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/createbooleanregions-curvearray_plane_point3darray_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves, plane, points, combineRegions, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanRegions1 : function(curves, plane, combineRegions, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/createbooleanregions-curvearray_plane_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves, plane, combineRegions, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createTextOutlines : function(text, font, textHeight, textStyle, closeLoops, plane, smallCapsScale, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/createtextoutlines-string_string_double_int_bool_plane_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, text, font, textHeight, textStyle, closeLoops, plane, smallCapsScale, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createCurve2View : function(curveA, curveB, vectorA, vectorB, tolerance, angleTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/createcurve2view-curve_curve_vector3d_vector3d_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB, vectorA, vectorB, tolerance, angleTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    doDirectionsMatch : function(curveA, curveB, multiple=false) {\r\n      let url='rhino/geometry/curve/dodirectionsmatch-curve_curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    projectToMesh : function(curve, mesh, direction, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/projecttomesh-curve_mesh_vector3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, mesh, direction, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    projectToMesh1 : function(curve, meshes, direction, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/projecttomesh-curve_mesharray_vector3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, meshes, direction, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    projectToMesh2 : function(curves, meshes, direction, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/projecttomesh-curvearray_mesharray_vector3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves, meshes, direction, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    projectToBrep : function(curve, brep, direction, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/projecttobrep-curve_brep_vector3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, brep, direction, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    projectToBrep1 : function(curve, breps, direction, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/projecttobrep-curve_breparray_vector3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, breps, direction, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    projectToBrep2 : function(curve, breps, direction, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/projecttobrep-curve_breparray_vector3d_double_intarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, breps, direction, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    projectToBrep3 : function(curves, breps, direction, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/projecttobrep-curvearray_breparray_vector3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves, breps, direction, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    projectToBrep4 : function(curves, breps, direction, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/projecttobrep-curvearray_breparray_vector3d_double_intarray_intarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves, breps, direction, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    projectToPlane : function(curve, plane, multiple=false) {\r\n      let url='rhino/geometry/curve/projecttoplane-curve_plane'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, plane)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    pullToBrepFace : function(curve, face, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/pulltobrepface-curve_brepface_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, face, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    planarClosedCurveRelationship : function(curveA, curveB, testPlane, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/planarclosedcurverelationship-curve_curve_plane_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB, testPlane, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    planarCurveCollision : function(curveA, curveB, testPlane, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/planarcurvecollision-curve_curve_plane_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB, testPlane, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    duplicateSegments : function(curve, multiple=false) {\r\n      let url='rhino/geometry/curve/duplicatesegments-curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    smooth : function(curve, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem, multiple=false) {\r\n      let url='rhino/geometry/curve/smooth-curve_double_bool_bool_bool_bool_smoothingcoordinatesystem'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    smooth1 : function(curve, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem, plane, multiple=false) {\r\n      let url='rhino/geometry/curve/smooth-curve_double_bool_bool_bool_bool_smoothingcoordinatesystem_plane'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem, plane)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getLocalPerpPoint : function(curve, testPoint, seedParmameter, multiple=false) {\r\n      let url='rhino/geometry/curve/getlocalperppoint-curve_point3d_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, testPoint, seedParmameter)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getLocalPerpPoint1 : function(curve, testPoint, seedParmameter, subDomain, multiple=false) {\r\n      let url='rhino/geometry/curve/getlocalperppoint-curve_point3d_double_interval_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, testPoint, seedParmameter, subDomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getLocalTangentPoint : function(curve, testPoint, seedParmameter, multiple=false) {\r\n      let url='rhino/geometry/curve/getlocaltangentpoint-curve_point3d_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, testPoint, seedParmameter)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getLocalTangentPoint1 : function(curve, testPoint, seedParmameter, subDomain, multiple=false) {\r\n      let url='rhino/geometry/curve/getlocaltangentpoint-curve_point3d_double_interval_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, testPoint, seedParmameter, subDomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    inflectionPoints : function(curve, multiple=false) {\r\n      let url='rhino/geometry/curve/inflectionpoints-curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    maxCurvaturePoints : function(curve, multiple=false) {\r\n      let url='rhino/geometry/curve/maxcurvaturepoints-curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    makeClosed : function(curve, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/makeclosed-curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    lcoalClosestPoint : function(curve, testPoint, seed, multiple=false) {\r\n      let url='rhino/geometry/curve/lcoalclosestpoint-curve_point3d_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, testPoint, seed)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    localClosestPoint : function(curve, testPoint, seed, multiple=false) {\r\n      let url='rhino/geometry/curve/localclosestpoint-curve_point3d_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, testPoint, seed)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    closestPoint : function(curve, testPoint, multiple=false) {\r\n      let url='rhino/geometry/curve/closestpoint-curve_point3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, testPoint)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    closestPoint1 : function(curve, testPoint, maximumDistance, multiple=false) {\r\n      let url='rhino/geometry/curve/closestpoint-curve_point3d_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, testPoint, maximumDistance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    closestPoints : function(curve, otherCurve, multiple=false) {\r\n      let url='rhino/geometry/curve/closestpoints-curve_curve_point3d_point3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, otherCurve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    contains : function(curve, testPoint, multiple=false) {\r\n      let url='rhino/geometry/curve/contains-curve_point3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, testPoint)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    contains1 : function(curve, testPoint, plane, multiple=false) {\r\n      let url='rhino/geometry/curve/contains-curve_point3d_plane'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, testPoint, plane)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    contains2 : function(curve, testPoint, plane, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/contains-curve_point3d_plane_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, testPoint, plane, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    extremeParameters : function(curve, direction, multiple=false) {\r\n      let url='rhino/geometry/curve/extremeparameters-curve_vector3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, direction)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPeriodicCurve : function(curve, multiple=false) {\r\n      let url='rhino/geometry/curve/createperiodiccurve-curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPeriodicCurve1 : function(curve, smooth, multiple=false) {\r\n      let url='rhino/geometry/curve/createperiodiccurve-curve_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, smooth)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    pointAtLength : function(curve, length, multiple=false) {\r\n      let url='rhino/geometry/curve/pointatlength-curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, length)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    pointAtNormalizedLength : function(curve, length, multiple=false) {\r\n      let url='rhino/geometry/curve/pointatnormalizedlength-curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, length)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    perpendicularFrameAt : function(curve, t, multiple=false) {\r\n      let url='rhino/geometry/curve/perpendicularframeat-curve_double_plane'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, t)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getPerpendicularFrames : function(curve, parameters, multiple=false) {\r\n      let url='rhino/geometry/curve/getperpendicularframes-curve_doublearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, parameters)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getLength : function(curve, multiple=false) {\r\n      let url='rhino/geometry/curve/getlength-curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getLength1 : function(curve, fractionalTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/getlength-curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, fractionalTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getLength2 : function(curve, subdomain, multiple=false) {\r\n      let url='rhino/geometry/curve/getlength-curve_interval'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, subdomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getLength3 : function(curve, fractionalTolerance, subdomain, multiple=false) {\r\n      let url='rhino/geometry/curve/getlength-curve_double_interval'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, fractionalTolerance, subdomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    isShort : function(curve, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/isshort-curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    isShort1 : function(curve, tolerance, subdomain, multiple=false) {\r\n      let url='rhino/geometry/curve/isshort-curve_double_interval'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, tolerance, subdomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    removeShortSegments : function(curve, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/removeshortsegments-curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    lengthParameter : function(curve, segmentLength, multiple=false) {\r\n      let url='rhino/geometry/curve/lengthparameter-curve_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, segmentLength)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    lengthParameter1 : function(curve, segmentLength, fractionalTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/lengthparameter-curve_double_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, segmentLength, fractionalTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    lengthParameter2 : function(curve, segmentLength, subdomain, multiple=false) {\r\n      let url='rhino/geometry/curve/lengthparameter-curve_double_double_interval'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, segmentLength, subdomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    lengthParameter3 : function(curve, segmentLength, fractionalTolerance, subdomain, multiple=false) {\r\n      let url='rhino/geometry/curve/lengthparameter-curve_double_double_double_interval'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, segmentLength, fractionalTolerance, subdomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    normalizedLengthParameter : function(curve, s, multiple=false) {\r\n      let url='rhino/geometry/curve/normalizedlengthparameter-curve_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, s)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    normalizedLengthParameter1 : function(curve, s, fractionalTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/normalizedlengthparameter-curve_double_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, s, fractionalTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    normalizedLengthParameter2 : function(curve, s, subdomain, multiple=false) {\r\n      let url='rhino/geometry/curve/normalizedlengthparameter-curve_double_double_interval'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, s, subdomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    normalizedLengthParameter3 : function(curve, s, fractionalTolerance, subdomain, multiple=false) {\r\n      let url='rhino/geometry/curve/normalizedlengthparameter-curve_double_double_double_interval'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, s, fractionalTolerance, subdomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    normalizedLengthParameters : function(curve, s, absoluteTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/normalizedlengthparameters-curve_doublearray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, s, absoluteTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    normalizedLengthParameters1 : function(curve, s, absoluteTolerance, fractionalTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/normalizedlengthparameters-curve_doublearray_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, s, absoluteTolerance, fractionalTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    normalizedLengthParameters2 : function(curve, s, absoluteTolerance, subdomain, multiple=false) {\r\n      let url='rhino/geometry/curve/normalizedlengthparameters-curve_doublearray_double_interval'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, s, absoluteTolerance, subdomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    normalizedLengthParameters3 : function(curve, s, absoluteTolerance, fractionalTolerance, subdomain, multiple=false) {\r\n      let url='rhino/geometry/curve/normalizedlengthparameters-curve_doublearray_double_double_interval'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, s, absoluteTolerance, fractionalTolerance, subdomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    divideByCount : function(curve, segmentCount, includeEnds, multiple=false) {\r\n      let url='rhino/geometry/curve/dividebycount-curve_int_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, segmentCount, includeEnds)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    divideByCount1 : function(curve, segmentCount, includeEnds, multiple=false) {\r\n      let url='rhino/geometry/curve/dividebycount-curve_int_bool_point3darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, segmentCount, includeEnds)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    divideByLength : function(curve, segmentLength, includeEnds, multiple=false) {\r\n      let url='rhino/geometry/curve/dividebylength-curve_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, segmentLength, includeEnds)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    divideByLength1 : function(curve, segmentLength, includeEnds, reverse, multiple=false) {\r\n      let url='rhino/geometry/curve/dividebylength-curve_double_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, segmentLength, includeEnds, reverse)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    divideByLength2 : function(curve, segmentLength, includeEnds, multiple=false) {\r\n      let url='rhino/geometry/curve/dividebylength-curve_double_bool_point3darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, segmentLength, includeEnds)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    divideByLength3 : function(curve, segmentLength, includeEnds, reverse, multiple=false) {\r\n      let url='rhino/geometry/curve/dividebylength-curve_double_bool_bool_point3darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, segmentLength, includeEnds, reverse)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    divideEquidistant : function(curve, distance, multiple=false) {\r\n      let url='rhino/geometry/curve/divideequidistant-curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, distance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    divideAsContour : function(curve, contourStart, contourEnd, interval, multiple=false) {\r\n      let url='rhino/geometry/curve/divideascontour-curve_point3d_point3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, contourStart, contourEnd, interval)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    trim : function(curve, side, length, multiple=false) {\r\n      let url='rhino/geometry/curve/trim-curve_curveend_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, side, length)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split : function(curve, cutter, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/split-curve_brep_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, cutter, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split1 : function(curve, cutter, tolerance, angleToleranceRadians, multiple=false) {\r\n      let url='rhino/geometry/curve/split-curve_brep_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, cutter, tolerance, angleToleranceRadians)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split2 : function(curve, cutter, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/split-curve_surface_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, cutter, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split3 : function(curve, cutter, tolerance, angleToleranceRadians, multiple=false) {\r\n      let url='rhino/geometry/curve/split-curve_surface_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, cutter, tolerance, angleToleranceRadians)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    extend : function(curve, t0, t1, multiple=false) {\r\n      let url='rhino/geometry/curve/extend-curve_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, t0, t1)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    extend1 : function(curve, domain, multiple=false) {\r\n      let url='rhino/geometry/curve/extend-curve_interval'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, domain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    extend2 : function(curve, side, length, style, multiple=false) {\r\n      let url='rhino/geometry/curve/extend-curve_curveend_double_curveextensionstyle'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, side, length, style)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    extend3 : function(curve, side, style, geometry, multiple=false) {\r\n      let url='rhino/geometry/curve/extend-curve_curveend_curveextensionstyle_geometrybasearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, side, style, geometry)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    extend4 : function(curve, side, style, endPoint, multiple=false) {\r\n      let url='rhino/geometry/curve/extend-curve_curveend_curveextensionstyle_point3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, side, style, endPoint)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    extendOnSurface : function(curve, side, surface, multiple=false) {\r\n      let url='rhino/geometry/curve/extendonsurface-curve_curveend_surface'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, side, surface)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    extendOnSurface1 : function(curve, side, face, multiple=false) {\r\n      let url='rhino/geometry/curve/extendonsurface-curve_curveend_brepface'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, side, face)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    extendByLine : function(curve, side, geometry, multiple=false) {\r\n      let url='rhino/geometry/curve/extendbyline-curve_curveend_geometrybasearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, side, geometry)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    extendByArc : function(curve, side, geometry, multiple=false) {\r\n      let url='rhino/geometry/curve/extendbyarc-curve_curveend_geometrybasearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, side, geometry)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    simplify : function(curve, options, distanceTolerance, angleToleranceRadians, multiple=false) {\r\n      let url='rhino/geometry/curve/simplify-curve_curvesimplifyoptions_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, options, distanceTolerance, angleToleranceRadians)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    simplifyEnd : function(curve, end, options, distanceTolerance, angleToleranceRadians, multiple=false) {\r\n      let url='rhino/geometry/curve/simplifyend-curve_curveend_curvesimplifyoptions_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, end, options, distanceTolerance, angleToleranceRadians)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    fair : function(curve, distanceTolerance, angleTolerance, clampStart, clampEnd, iterations, multiple=false) {\r\n      let url='rhino/geometry/curve/fair-curve_double_double_int_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, distanceTolerance, angleTolerance, clampStart, clampEnd, iterations)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    fit : function(curve, degree, fitTolerance, angleTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/fit-curve_int_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, degree, fitTolerance, angleTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    rebuild : function(curve, pointCount, degree, preserveTangents, multiple=false) {\r\n      let url='rhino/geometry/curve/rebuild-curve_int_int_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, pointCount, degree, preserveTangents)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    toPolyline : function(curve, mainSegmentCount, subSegmentCount, maxAngleRadians, maxChordLengthRatio, maxAspectRatio, tolerance, minEdgeLength, maxEdgeLength, keepStartPoint, multiple=false) {\r\n      let url='rhino/geometry/curve/topolyline-curve_int_int_double_double_double_double_double_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, mainSegmentCount, subSegmentCount, maxAngleRadians, maxChordLengthRatio, maxAspectRatio, tolerance, minEdgeLength, maxEdgeLength, keepStartPoint)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    toPolyline1 : function(curve, mainSegmentCount, subSegmentCount, maxAngleRadians, maxChordLengthRatio, maxAspectRatio, tolerance, minEdgeLength, maxEdgeLength, keepStartPoint, curveDomain, multiple=false) {\r\n      let url='rhino/geometry/curve/topolyline-curve_int_int_double_double_double_double_double_double_bool_interval'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, mainSegmentCount, subSegmentCount, maxAngleRadians, maxChordLengthRatio, maxAspectRatio, tolerance, minEdgeLength, maxEdgeLength, keepStartPoint, curveDomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    toPolyline2 : function(curve, tolerance, angleTolerance, minimumLength, maximumLength, multiple=false) {\r\n      let url='rhino/geometry/curve/topolyline-curve_double_double_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, tolerance, angleTolerance, minimumLength, maximumLength)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    toArcsAndLines : function(curve, tolerance, angleTolerance, minimumLength, maximumLength, multiple=false) {\r\n      let url='rhino/geometry/curve/toarcsandlines-curve_double_double_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, tolerance, angleTolerance, minimumLength, maximumLength)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    pullToMesh : function(curve, mesh, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/pulltomesh-curve_mesh_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, mesh, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offset : function(curve, plane, distance, tolerance, cornerStyle, multiple=false) {\r\n      let url='rhino/geometry/curve/offset-curve_plane_double_double_curveoffsetcornerstyle'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, plane, distance, tolerance, cornerStyle)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offset1 : function(curve, directionPoint, normal, distance, tolerance, cornerStyle, multiple=false) {\r\n      let url='rhino/geometry/curve/offset-curve_point3d_vector3d_double_double_curveoffsetcornerstyle'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, directionPoint, normal, distance, tolerance, cornerStyle)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offset2 : function(curve, directionPoint, normal, distance, tolerance, angleTolerance, loose, cornerStyle, endStyle, multiple=false) {\r\n      let url='rhino/geometry/curve/offset-curve_point3d_vector3d_double_double_double_bool_curveoffsetcornerstyle_curveoffsetendstyle'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, directionPoint, normal, distance, tolerance, angleTolerance, loose, cornerStyle, endStyle)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    ribbonOffset : function(curve, distance, blendRadius, directionPoint, normal, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/ribbonoffset-curve_double_double_point3d_vector3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, distance, blendRadius, directionPoint, normal, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offsetOnSurface : function(curve, face, distance, fittingTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/offsetonsurface-curve_brepface_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, face, distance, fittingTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offsetOnSurface1 : function(curve, face, throughPoint, fittingTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/offsetonsurface-curve_brepface_point2d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, face, throughPoint, fittingTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offsetOnSurface2 : function(curve, face, curveParameters, offsetDistances, fittingTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/offsetonsurface-curve_brepface_doublearray_doublearray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, face, curveParameters, offsetDistances, fittingTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offsetOnSurface3 : function(curve, surface, distance, fittingTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/offsetonsurface-curve_surface_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, surface, distance, fittingTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offsetOnSurface4 : function(curve, surface, throughPoint, fittingTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/offsetonsurface-curve_surface_point2d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, surface, throughPoint, fittingTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offsetOnSurface5 : function(curve, surface, curveParameters, offsetDistances, fittingTolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/offsetonsurface-curve_surface_doublearray_doublearray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, surface, curveParameters, offsetDistances, fittingTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    pullToBrepFace1 : function(curve, face, tolerance, multiple=false) {\r\n      let url='rhino/geometry/curve/pulltobrepface-curve_brepface_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, face, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offsetNormalToSurface : function(curve, surface, height, multiple=false) {\r\n      let url='rhino/geometry/curve/offsetnormaltosurface-curve_surface_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, surface, height)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n  },\r\n\r\n  GeometryBase : {\r\n    getBoundingBox : function(geometrybase, accurate, multiple=false) {\r\n      let url='rhino/geometry/geometrybase/getboundingbox-geometrybase_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, geometrybase, accurate)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getBoundingBox1 : function(geometrybase, xform, multiple=false) {\r\n      let url='rhino/geometry/geometrybase/getboundingbox-geometrybase_transform'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, geometrybase, xform)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    geometryEquals : function(first, second, multiple=false) {\r\n      let url='rhino/geometry/geometrybase/geometryequals-geometrybase_geometrybase'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, first, second)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n  },\r\n\r\n  AreaMassProperties : {\r\n    compute : function(closedPlanarCurve, multiple=false) {\r\n      let url='rhino/geometry/areamassproperties/compute-curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, closedPlanarCurve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute1 : function(closedPlanarCurve, planarTolerance, multiple=false) {\r\n      let url='rhino/geometry/areamassproperties/compute-curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, closedPlanarCurve, planarTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute2 : function(hatch, multiple=false) {\r\n      let url='rhino/geometry/areamassproperties/compute-hatch'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, hatch)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute3 : function(mesh, multiple=false) {\r\n      let url='rhino/geometry/areamassproperties/compute-mesh'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute4 : function(mesh, area, firstMoments, secondMoments, productMoments, multiple=false) {\r\n      let url='rhino/geometry/areamassproperties/compute-mesh_bool_bool_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, area, firstMoments, secondMoments, productMoments)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute5 : function(brep, multiple=false) {\r\n      let url='rhino/geometry/areamassproperties/compute-brep'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute6 : function(brep, area, firstMoments, secondMoments, productMoments, multiple=false) {\r\n      let url='rhino/geometry/areamassproperties/compute-brep_bool_bool_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, area, firstMoments, secondMoments, productMoments)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute7 : function(surface, multiple=false) {\r\n      let url='rhino/geometry/areamassproperties/compute-surface'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute8 : function(surface, area, firstMoments, secondMoments, productMoments, multiple=false) {\r\n      let url='rhino/geometry/areamassproperties/compute-surface_bool_bool_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, area, firstMoments, secondMoments, productMoments)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute9 : function(geometry, multiple=false) {\r\n      let url='rhino/geometry/areamassproperties/compute-geometrybasearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, geometry)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute10 : function(geometry, area, firstMoments, secondMoments, productMoments, multiple=false) {\r\n      let url='rhino/geometry/areamassproperties/compute-geometrybasearray_bool_bool_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, geometry, area, firstMoments, secondMoments, productMoments)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n  },\r\n\r\n  VolumeMassProperties : {\r\n    compute : function(mesh, multiple=false) {\r\n      let url='rhino/geometry/volumemassproperties/compute-mesh'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute1 : function(mesh, volume, firstMoments, secondMoments, productMoments, multiple=false) {\r\n      let url='rhino/geometry/volumemassproperties/compute-mesh_bool_bool_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, volume, firstMoments, secondMoments, productMoments)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute2 : function(brep, multiple=false) {\r\n      let url='rhino/geometry/volumemassproperties/compute-brep'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute3 : function(brep, volume, firstMoments, secondMoments, productMoments, multiple=false) {\r\n      let url='rhino/geometry/volumemassproperties/compute-brep_bool_bool_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, volume, firstMoments, secondMoments, productMoments)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute4 : function(surface, multiple=false) {\r\n      let url='rhino/geometry/volumemassproperties/compute-surface'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute5 : function(surface, volume, firstMoments, secondMoments, productMoments, multiple=false) {\r\n      let url='rhino/geometry/volumemassproperties/compute-surface_bool_bool_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, volume, firstMoments, secondMoments, productMoments)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute6 : function(geometry, multiple=false) {\r\n      let url='rhino/geometry/volumemassproperties/compute-geometrybasearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, geometry)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    compute7 : function(geometry, volume, firstMoments, secondMoments, productMoments, multiple=false) {\r\n      let url='rhino/geometry/volumemassproperties/compute-geometrybasearray_bool_bool_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, geometry, volume, firstMoments, secondMoments, productMoments)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    sum : function(volumemassproperties, summand, multiple=false) {\r\n      let url='rhino/geometry/volumemassproperties/sum-volumemassproperties_volumemassproperties'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, volumemassproperties, summand)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n  },\r\n\r\n  Mesh : {\r\n    createFromPlane : function(plane, xInterval, yInterval, xCount, yCount, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromplane-plane_interval_interval_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, plane, xInterval, yInterval, xCount, yCount)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromFilteredFaceList : function(original, inclusion, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromfilteredfacelist-mesh_boolarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, original, inclusion)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromBox : function(box, xCount, yCount, zCount, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfrombox-boundingbox_int_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, box, xCount, yCount, zCount)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromBox1 : function(box, xCount, yCount, zCount, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfrombox-box_int_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, box, xCount, yCount, zCount)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromBox2 : function(corners, xCount, yCount, zCount, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfrombox-point3darray_int_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, corners, xCount, yCount, zCount)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSphere : function(sphere, xCount, yCount, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromsphere-sphere_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, sphere, xCount, yCount)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createIcoSphere : function(sphere, subdivisions, multiple=false) {\r\n      let url='rhino/geometry/mesh/createicosphere-sphere_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, sphere, subdivisions)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createQuadSphere : function(sphere, subdivisions, multiple=false) {\r\n      let url='rhino/geometry/mesh/createquadsphere-sphere_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, sphere, subdivisions)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCylinder : function(cylinder, vertical, around, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromcylinder-cylinder_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, cylinder, vertical, around)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCylinder1 : function(cylinder, vertical, around, capBottom, capTop, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromcylinder-cylinder_int_int_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, cylinder, vertical, around, capBottom, capTop)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCylinder2 : function(cylinder, vertical, around, capBottom, capTop, quadCaps, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromcylinder-cylinder_int_int_bool_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, cylinder, vertical, around, capBottom, capTop, quadCaps)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCone : function(cone, vertical, around, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromcone-cone_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, cone, vertical, around)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCone1 : function(cone, vertical, around, solid, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromcone-cone_int_int_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, cone, vertical, around, solid)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCone2 : function(cone, vertical, around, solid, quadCaps, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromcone-cone_int_int_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, cone, vertical, around, solid, quadCaps)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromTorus : function(torus, vertical, around, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromtorus-torus_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, torus, vertical, around)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromPlanarBoundary : function(boundary, parameters, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromplanarboundary-curve_meshingparameters'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, boundary, parameters)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromPlanarBoundary1 : function(boundary, parameters, tolerance, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromplanarboundary-curve_meshingparameters_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, boundary, parameters, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromClosedPolyline : function(polyline, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromclosedpolyline-polyline'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, polyline)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromTessellation : function(points, edges, plane, allowNewVertices, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromtessellation-point3darray_ienumerable<point3d>array_plane_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, points, edges, plane, allowNewVertices)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromBrep : function(brep, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfrombrep-brep'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromBrep1 : function(brep, meshingParameters, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfrombrep-brep_meshingparameters'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, meshingParameters)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSurface : function(surface, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromsurface-surface'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSurface1 : function(surface, meshingParameters, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromsurface-surface_meshingparameters'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, meshingParameters)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSubD : function(subd, displayDensity, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromsubd-subd_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, subd, displayDensity)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPatch : function(outerBoundary, angleToleranceRadians, pullbackSurface, innerBoundaryCurves, innerBothSideCurves, innerPoints, trimback, divisions, multiple=false) {\r\n      let url='rhino/geometry/mesh/createpatch-polyline_double_surface_curvearray_curvearray_point3darray_bool_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, outerBoundary, angleToleranceRadians, pullbackSurface, innerBoundaryCurves, innerBothSideCurves, innerPoints, trimback, divisions)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanUnion : function(meshes, multiple=false) {\r\n      let url='rhino/geometry/mesh/createbooleanunion-mesharray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, meshes)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanDifference : function(firstSet, secondSet, multiple=false) {\r\n      let url='rhino/geometry/mesh/createbooleandifference-mesharray_mesharray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, firstSet, secondSet)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanIntersection : function(firstSet, secondSet, multiple=false) {\r\n      let url='rhino/geometry/mesh/createbooleanintersection-mesharray_mesharray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, firstSet, secondSet)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createBooleanSplit : function(meshesToSplit, meshSplitters, multiple=false) {\r\n      let url='rhino/geometry/mesh/createbooleansplit-mesharray_mesharray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, meshesToSplit, meshSplitters)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCurvePipe : function(curve, radius, segments, accuracy, capType, faceted, intervals, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromcurvepipe-curve_double_int_int_meshpipecapstyle_bool_intervalarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, radius, segments, accuracy, capType, faceted, intervals)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCurveExtrusion : function(curve, direction, parameters, boundingBox, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromcurveextrusion-curve_vector3d_meshingparameters_boundingbox'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, direction, parameters, boundingBox)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromIterativeCleanup : function(meshes, tolerance, multiple=false) {\r\n      let url='rhino/geometry/mesh/createfromiterativecleanup-mesharray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, meshes, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    requireIterativeCleanup : function(meshes, tolerance, multiple=false) {\r\n      let url='rhino/geometry/mesh/requireiterativecleanup-mesharray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, meshes, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    volume : function(mesh, multiple=false) {\r\n      let url='rhino/geometry/mesh/volume-mesh'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    isPointInside : function(mesh, point, tolerance, strictlyIn, multiple=false) {\r\n      let url='rhino/geometry/mesh/ispointinside-mesh_point3d_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, point, tolerance, strictlyIn)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    smooth : function(mesh, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem, multiple=false) {\r\n      let url='rhino/geometry/mesh/smooth-mesh_double_bool_bool_bool_bool_smoothingcoordinatesystem'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    smooth1 : function(mesh, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem, plane, multiple=false) {\r\n      let url='rhino/geometry/mesh/smooth-mesh_double_bool_bool_bool_bool_smoothingcoordinatesystem_plane'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem, plane)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    smooth2 : function(mesh, vertexIndices, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem, plane, multiple=false) {\r\n      let url='rhino/geometry/mesh/smooth-mesh_intarray_double_bool_bool_bool_bool_smoothingcoordinatesystem_plane'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, vertexIndices, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem, plane)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    unweld : function(mesh, angleToleranceRadians, modifyNormals, multiple=false) {\r\n      let url='rhino/geometry/mesh/unweld-mesh_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, angleToleranceRadians, modifyNormals)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    unweldEdge : function(mesh, edgeIndices, modifyNormals, multiple=false) {\r\n      let url='rhino/geometry/mesh/unweldedge-mesh_intarray_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, edgeIndices, modifyNormals)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    unweldVertices : function(mesh, topologyVertexIndices, modifyNormals, multiple=false) {\r\n      let url='rhino/geometry/mesh/unweldvertices-mesh_intarray_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, topologyVertexIndices, modifyNormals)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    weld : function(mesh, angleToleranceRadians, multiple=false) {\r\n      let url='rhino/geometry/mesh/weld-mesh_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, angleToleranceRadians)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    rebuildNormals : function(mesh, multiple=false) {\r\n      let url='rhino/geometry/mesh/rebuildnormals-mesh'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    extractNonManifoldEdges : function(mesh, selective, multiple=false) {\r\n      let url='rhino/geometry/mesh/extractnonmanifoldedges-mesh_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, selective)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    healNakedEdges : function(mesh, distance, multiple=false) {\r\n      let url='rhino/geometry/mesh/healnakededges-mesh_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, distance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    fillHoles : function(mesh, multiple=false) {\r\n      let url='rhino/geometry/mesh/fillholes-mesh'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    fileHole : function(mesh, topologyEdgeIndex, multiple=false) {\r\n      let url='rhino/geometry/mesh/filehole-mesh_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, topologyEdgeIndex)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    unifyNormals : function(mesh, multiple=false) {\r\n      let url='rhino/geometry/mesh/unifynormals-mesh'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    unifyNormals1 : function(mesh, countOnly, multiple=false) {\r\n      let url='rhino/geometry/mesh/unifynormals-mesh_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, countOnly)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    splitDisjointPieces : function(mesh, multiple=false) {\r\n      let url='rhino/geometry/mesh/splitdisjointpieces-mesh'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split : function(mesh, plane, multiple=false) {\r\n      let url='rhino/geometry/mesh/split-mesh_plane'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, plane)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split1 : function(_mesh, mesh, multiple=false) {\r\n      let url='rhino/geometry/mesh/split-mesh_mesh'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, _mesh, mesh)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split2 : function(mesh, meshes, multiple=false) {\r\n      let url='rhino/geometry/mesh/split-mesh_mesharray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, meshes)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split3 : function(mesh, meshes, tolerance, splitAtCoplanar, textLog, cancel, progress, multiple=false) {\r\n      let url='rhino/geometry/mesh/split-mesh_mesharray_double_bool_textlog_cancellationtoken_doublearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, meshes, tolerance, splitAtCoplanar, textLog, cancel, progress)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    split4 : function(mesh, meshes, tolerance, splitAtCoplanar, createNgons, textLog, cancel, progress, multiple=false) {\r\n      let url='rhino/geometry/mesh/split-mesh_mesharray_double_bool_bool_textlog_cancellationtoken_doublearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, meshes, tolerance, splitAtCoplanar, createNgons, textLog, cancel, progress)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getOutlines : function(mesh, plane, multiple=false) {\r\n      let url='rhino/geometry/mesh/getoutlines-mesh_plane'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, plane)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getOutlines1 : function(mesh, viewport, multiple=false) {\r\n      let url='rhino/geometry/mesh/getoutlines-mesh_display.rhinoviewport'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, viewport)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getOutlines2 : function(mesh, viewportInfo, plane, multiple=false) {\r\n      let url='rhino/geometry/mesh/getoutlines-mesh_viewportinfo_plane'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, viewportInfo, plane)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getNakedEdges : function(mesh, multiple=false) {\r\n      let url='rhino/geometry/mesh/getnakededges-mesh'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    explodeAtUnweldedEdges : function(mesh, multiple=false) {\r\n      let url='rhino/geometry/mesh/explodeatunweldededges-mesh'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    closestPoint : function(mesh, testPoint, multiple=false) {\r\n      let url='rhino/geometry/mesh/closestpoint-mesh_point3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, testPoint)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    closestMeshPoint : function(mesh, testPoint, maximumDistance, multiple=false) {\r\n      let url='rhino/geometry/mesh/closestmeshpoint-mesh_point3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, testPoint, maximumDistance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    closestPoint1 : function(mesh, testPoint, maximumDistance, multiple=false) {\r\n      let url='rhino/geometry/mesh/closestpoint-mesh_point3d_point3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, testPoint, maximumDistance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    closestPoint2 : function(mesh, testPoint, maximumDistance, multiple=false) {\r\n      let url='rhino/geometry/mesh/closestpoint-mesh_point3d_point3d_vector3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, testPoint, maximumDistance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    pointAt : function(mesh, meshPoint, multiple=false) {\r\n      let url='rhino/geometry/mesh/pointat-mesh_meshpoint'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, meshPoint)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    pointAt1 : function(mesh, faceIndex, t0, t1, t2, t3, multiple=false) {\r\n      let url='rhino/geometry/mesh/pointat-mesh_int_double_double_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, faceIndex, t0, t1, t2, t3)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    normalAt : function(mesh, meshPoint, multiple=false) {\r\n      let url='rhino/geometry/mesh/normalat-mesh_meshpoint'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, meshPoint)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    normalAt1 : function(mesh, faceIndex, t0, t1, t2, t3, multiple=false) {\r\n      let url='rhino/geometry/mesh/normalat-mesh_int_double_double_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, faceIndex, t0, t1, t2, t3)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    colorAt : function(mesh, meshPoint, multiple=false) {\r\n      let url='rhino/geometry/mesh/colorat-mesh_meshpoint'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, meshPoint)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    colorAt1 : function(mesh, faceIndex, t0, t1, t2, t3, multiple=false) {\r\n      let url='rhino/geometry/mesh/colorat-mesh_int_double_double_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, faceIndex, t0, t1, t2, t3)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    pullPointsToMesh : function(mesh, points, multiple=false) {\r\n      let url='rhino/geometry/mesh/pullpointstomesh-mesh_point3darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, points)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    pullCurve : function(mesh, curve, tolerance, multiple=false) {\r\n      let url='rhino/geometry/mesh/pullcurve-mesh_curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, curve, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    splitWithProjectedPolylines : function(mesh, curves, tolerance, multiple=false) {\r\n      let url='rhino/geometry/mesh/splitwithprojectedpolylines-mesh_polylinecurvearray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, curves, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    splitWithProjectedPolylines1 : function(mesh, curves, tolerance, textLog, cancel, progress, multiple=false) {\r\n      let url='rhino/geometry/mesh/splitwithprojectedpolylines-mesh_polylinecurvearray_double_textlog_cancellationtoken_doublearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, curves, tolerance, textLog, cancel, progress)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offset : function(mesh, distance, multiple=false) {\r\n      let url='rhino/geometry/mesh/offset-mesh_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, distance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offset1 : function(mesh, distance, solidify, multiple=false) {\r\n      let url='rhino/geometry/mesh/offset-mesh_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, distance, solidify)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offset2 : function(mesh, distance, solidify, direction, multiple=false) {\r\n      let url='rhino/geometry/mesh/offset-mesh_double_bool_vector3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, distance, solidify, direction)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offset3 : function(mesh, distance, solidify, direction, multiple=false) {\r\n      let url='rhino/geometry/mesh/offset-mesh_double_bool_vector3d_intarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, distance, solidify, direction)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    collapseFacesByEdgeLength : function(mesh, bGreaterThan, edgeLength, multiple=false) {\r\n      let url='rhino/geometry/mesh/collapsefacesbyedgelength-mesh_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, bGreaterThan, edgeLength)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    collapseFacesByArea : function(mesh, lessThanArea, greaterThanArea, multiple=false) {\r\n      let url='rhino/geometry/mesh/collapsefacesbyarea-mesh_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, lessThanArea, greaterThanArea)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    collapseFacesByByAspectRatio : function(mesh, aspectRatio, multiple=false) {\r\n      let url='rhino/geometry/mesh/collapsefacesbybyaspectratio-mesh_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, aspectRatio)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getUnsafeLock : function(mesh, writable, multiple=false) {\r\n      let url='rhino/geometry/mesh/getunsafelock-mesh_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, writable)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    releaseUnsafeLock : function(mesh, meshData, multiple=false) {\r\n      let url='rhino/geometry/mesh/releaseunsafelock-mesh_meshunsafelock'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, meshData)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    withShutLining : function(mesh, faceted, tolerance, curves, multiple=false) {\r\n      let url='rhino/geometry/mesh/withshutlining-mesh_bool_double_shutliningcurveinfoarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, faceted, tolerance, curves)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    withDisplacement : function(mesh, displacement, multiple=false) {\r\n      let url='rhino/geometry/mesh/withdisplacement-mesh_meshdisplacementinfo'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, displacement)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    withEdgeSoftening : function(mesh, softeningRadius, chamfer, faceted, force, angleThreshold, multiple=false) {\r\n      let url='rhino/geometry/mesh/withedgesoftening-mesh_double_bool_bool_bool_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, softeningRadius, chamfer, faceted, force, angleThreshold)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    quadRemeshBrep : function(brep, parameters, multiple=false) {\r\n      let url='rhino/geometry/mesh/quadremeshbrep-brep_quadremeshparameters'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, parameters)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    quadRemeshBrep1 : function(brep, parameters, guideCurves, multiple=false) {\r\n      let url='rhino/geometry/mesh/quadremeshbrep-brep_quadremeshparameters_curvearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, parameters, guideCurves)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    quadRemeshBrepAsync : function(brep, parameters, progress, cancelToken, multiple=false) {\r\n      let url='rhino/geometry/mesh/quadremeshbrepasync-brep_quadremeshparameters_intarray_cancellationtoken'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, parameters, progress, cancelToken)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    quadRemeshBrepAsync1 : function(brep, parameters, guideCurves, progress, cancelToken, multiple=false) {\r\n      let url='rhino/geometry/mesh/quadremeshbrepasync-brep_quadremeshparameters_curvearray_intarray_cancellationtoken'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, parameters, guideCurves, progress, cancelToken)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    quadRemesh : function(mesh, parameters, multiple=false) {\r\n      let url='rhino/geometry/mesh/quadremesh-mesh_quadremeshparameters'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, parameters)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    quadRemesh1 : function(mesh, parameters, guideCurves, multiple=false) {\r\n      let url='rhino/geometry/mesh/quadremesh-mesh_quadremeshparameters_curvearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, parameters, guideCurves)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    quadRemeshAsync : function(mesh, parameters, progress, cancelToken, multiple=false) {\r\n      let url='rhino/geometry/mesh/quadremeshasync-mesh_quadremeshparameters_intarray_cancellationtoken'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, parameters, progress, cancelToken)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    quadRemeshAsync1 : function(mesh, parameters, guideCurves, progress, cancelToken, multiple=false) {\r\n      let url='rhino/geometry/mesh/quadremeshasync-mesh_quadremeshparameters_curvearray_intarray_cancellationtoken'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, parameters, guideCurves, progress, cancelToken)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    quadRemeshAsync2 : function(mesh, faceBlocks, parameters, guideCurves, progress, cancelToken, multiple=false) {\r\n      let url='rhino/geometry/mesh/quadremeshasync-mesh_intarray_quadremeshparameters_curvearray_intarray_cancellationtoken'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, faceBlocks, parameters, guideCurves, progress, cancelToken)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    reduce : function(mesh, desiredPolygonCount, allowDistortion, accuracy, normalizeSize, multiple=false) {\r\n      let url='rhino/geometry/mesh/reduce-mesh_int_bool_int_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, desiredPolygonCount, allowDistortion, accuracy, normalizeSize)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    reduce1 : function(mesh, desiredPolygonCount, allowDistortion, accuracy, normalizeSize, threaded, multiple=false) {\r\n      let url='rhino/geometry/mesh/reduce-mesh_int_bool_int_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, desiredPolygonCount, allowDistortion, accuracy, normalizeSize, threaded)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    reduce2 : function(mesh, desiredPolygonCount, allowDistortion, accuracy, normalizeSize, cancelToken, progress, multiple=false) {\r\n      let url='rhino/geometry/mesh/reduce-mesh_int_bool_int_bool_cancellationtoken_doublearray_string'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, desiredPolygonCount, allowDistortion, accuracy, normalizeSize, cancelToken, progress)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    reduce3 : function(mesh, desiredPolygonCount, allowDistortion, accuracy, normalizeSize, cancelToken, progress, threaded, multiple=false) {\r\n      let url='rhino/geometry/mesh/reduce-mesh_int_bool_int_bool_cancellationtoken_doublearray_string_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, desiredPolygonCount, allowDistortion, accuracy, normalizeSize, cancelToken, progress, threaded)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    reduce4 : function(mesh, parameters, multiple=false) {\r\n      let url='rhino/geometry/mesh/reduce-mesh_reducemeshparameters'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, parameters)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    reduce5 : function(mesh, parameters, threaded, multiple=false) {\r\n      let url='rhino/geometry/mesh/reduce-mesh_reducemeshparameters_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, parameters, threaded)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    computeThickness : function(meshes, maximumThickness, multiple=false) {\r\n      let url='rhino/geometry/mesh/computethickness-mesharray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, meshes, maximumThickness)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    computeThickness1 : function(meshes, maximumThickness, cancelToken, multiple=false) {\r\n      let url='rhino/geometry/mesh/computethickness-mesharray_double_system.threading.cancellationtoken'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, meshes, maximumThickness, cancelToken)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    computeThickness2 : function(meshes, maximumThickness, sharpAngle, cancelToken, multiple=false) {\r\n      let url='rhino/geometry/mesh/computethickness-mesharray_double_double_system.threading.cancellationtoken'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, meshes, maximumThickness, sharpAngle, cancelToken)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createContourCurves : function(meshToContour, contourStart, contourEnd, interval, multiple=false) {\r\n      let url='rhino/geometry/mesh/createcontourcurves-mesh_point3d_point3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, meshToContour, contourStart, contourEnd, interval)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createContourCurves1 : function(meshToContour, sectionPlane, multiple=false) {\r\n      let url='rhino/geometry/mesh/createcontourcurves-mesh_plane'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, meshToContour, sectionPlane)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n  },\r\n\r\n  NurbsCurve : {\r\n    makeCompatible : function(curves, startPt, endPt, simplifyMethod, numPoints, refitTolerance, angleTolerance, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/makecompatible-curvearray_point3d_point3d_int_int_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves, startPt, endPt, simplifyMethod, numPoints, refitTolerance, angleTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createParabolaFromVertex : function(vertex, startPoint, endPoint, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/createparabolafromvertex-point3d_point3d_point3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, vertex, startPoint, endPoint)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createParabolaFromFocus : function(focus, startPoint, endPoint, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/createparabolafromfocus-point3d_point3d_point3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, focus, startPoint, endPoint)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromArc : function(arc, degree, cvCount, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/createfromarc-arc_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, arc, degree, cvCount)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createHSpline : function(points, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/createhspline-point3darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, points)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createHSpline1 : function(points, startTangent, endTangent, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/createhspline-point3darray_vector3d_vector3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, points, startTangent, endTangent)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createSubDFriendly : function(points, interpolatePoints, periodicClosedCurve, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/createsubdfriendly-point3darray_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, points, interpolatePoints, periodicClosedCurve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createSubDFriendly1 : function(curve, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/createsubdfriendly-curve'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createSubDFriendly2 : function(curve, pointCount, periodicClosedCurve, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/createsubdfriendly-curve_int_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, pointCount, periodicClosedCurve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPlanarRailFrames : function(nurbscurve, parameters, normal, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/createplanarrailframes-nurbscurve_doublearray_vector3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, nurbscurve, parameters, normal)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createRailFrames : function(nurbscurve, parameters, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/createrailframes-nurbscurve_doublearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, nurbscurve, parameters)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCircle : function(circle, degree, cvCount, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/createfromcircle-circle_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, circle, degree, cvCount)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    setEndCondition : function(nurbscurve, bSetEnd, continuity, point, tangent, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/setendcondition-nurbscurve_bool_nurbscurveendconditiontype_point3d_vector3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, nurbscurve, bSetEnd, continuity, point, tangent)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    setEndCondition1 : function(nurbscurve, bSetEnd, continuity, point, tangent, curvature, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/setendcondition-nurbscurve_bool_nurbscurveendconditiontype_point3d_vector3d_vector3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, nurbscurve, bSetEnd, continuity, point, tangent, curvature)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    grevillePoints : function(nurbscurve, all, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/grevillepoints-nurbscurve_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, nurbscurve, all)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    setGrevillePoints : function(nurbscurve, points, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/setgrevillepoints-nurbscurve_point3darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, nurbscurve, points)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createSpiral : function(axisStart, axisDir, radiusPoint, pitch, turnCount, radius0, radius1, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/createspiral-point3d_vector3d_point3d_double_double_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, axisStart, axisDir, radiusPoint, pitch, turnCount, radius0, radius1)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createSpiral1 : function(railCurve, t0, t1, radiusPoint, pitch, turnCount, radius0, radius1, pointsPerTurn, multiple=false) {\r\n      let url='rhino/geometry/nurbscurve/createspiral-curve_double_double_point3d_double_double_double_double_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, railCurve, t0, t1, radiusPoint, pitch, turnCount, radius0, radius1, pointsPerTurn)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n  },\r\n\r\n  NurbsSurface : {\r\n    createSubDFriendly : function(surface, multiple=false) {\r\n      let url='rhino/geometry/nurbssurface/createsubdfriendly-surface'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromPlane : function(plane, uInterval, vInterval, uDegree, vDegree, uPointCount, vPointCount, multiple=false) {\r\n      let url='rhino/geometry/nurbssurface/createfromplane-plane_interval_interval_int_int_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, plane, uInterval, vInterval, uDegree, vDegree, uPointCount, vPointCount)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createCurveOnSurfacePoints : function(surface, fixedPoints, tolerance, periodic, initCount, levels, multiple=false) {\r\n      let url='rhino/geometry/nurbssurface/createcurveonsurfacepoints-surface_point2darray_double_bool_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, fixedPoints, tolerance, periodic, initCount, levels)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createCurveOnSurface : function(surface, points, tolerance, periodic, multiple=false) {\r\n      let url='rhino/geometry/nurbssurface/createcurveonsurface-surface_point2darray_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, points, tolerance, periodic)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    makeCompatible : function(surface0, surface1, multiple=false) {\r\n      let url='rhino/geometry/nurbssurface/makecompatible-surface_surface_nurbssurface_nurbssurface'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface0, surface1)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromPoints : function(points, uCount, vCount, uDegree, vDegree, multiple=false) {\r\n      let url='rhino/geometry/nurbssurface/createfrompoints-point3darray_int_int_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, points, uCount, vCount, uDegree, vDegree)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createThroughPoints : function(points, uCount, vCount, uDegree, vDegree, uClosed, vClosed, multiple=false) {\r\n      let url='rhino/geometry/nurbssurface/createthroughpoints-point3darray_int_int_int_int_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, points, uCount, vCount, uDegree, vDegree, uClosed, vClosed)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCorners : function(corner1, corner2, corner3, corner4, multiple=false) {\r\n      let url='rhino/geometry/nurbssurface/createfromcorners-point3d_point3d_point3d_point3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, corner1, corner2, corner3, corner4)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCorners1 : function(corner1, corner2, corner3, corner4, tolerance, multiple=false) {\r\n      let url='rhino/geometry/nurbssurface/createfromcorners-point3d_point3d_point3d_point3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, corner1, corner2, corner3, corner4, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromCorners2 : function(corner1, corner2, corner3, multiple=false) {\r\n      let url='rhino/geometry/nurbssurface/createfromcorners-point3d_point3d_point3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, corner1, corner2, corner3)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createRailRevolvedSurface : function(profile, rail, axis, scaleHeight, multiple=false) {\r\n      let url='rhino/geometry/nurbssurface/createrailrevolvedsurface-curve_curve_line_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, profile, rail, axis, scaleHeight)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createNetworkSurface : function(uCurves, uContinuityStart, uContinuityEnd, vCurves, vContinuityStart, vContinuityEnd, edgeTolerance, interiorTolerance, angleTolerance, multiple=false) {\r\n      let url='rhino/geometry/nurbssurface/createnetworksurface-curvearray_int_int_curvearray_int_int_double_double_double_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, uCurves, uContinuityStart, uContinuityEnd, vCurves, vContinuityStart, vContinuityEnd, edgeTolerance, interiorTolerance, angleTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createNetworkSurface1 : function(curves, continuity, edgeTolerance, interiorTolerance, angleTolerance, multiple=false) {\r\n      let url='rhino/geometry/nurbssurface/createnetworksurface-curvearray_int_double_double_double_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves, continuity, edgeTolerance, interiorTolerance, angleTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n  },\r\n\r\n  SubD : {\r\n    toBrep : function(subd, options, multiple=false) {\r\n      let url='rhino/geometry/subd/tobrep-subd_subdtobrepoptions'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, subd, options)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromMesh : function(mesh, multiple=false) {\r\n      let url='rhino/geometry/subd/createfrommesh-mesh'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromMesh1 : function(mesh, options, multiple=false) {\r\n      let url='rhino/geometry/subd/createfrommesh-mesh_subdcreationoptions'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, options)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offset : function(subd, distance, solidify, multiple=false) {\r\n      let url='rhino/geometry/subd/offset-subd_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, subd, distance, solidify)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromLoft : function(curves, closed, addCorners, addCreases, divisions, multiple=false) {\r\n      let url='rhino/geometry/subd/createfromloft-nurbscurvearray_bool_bool_bool_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curves, closed, addCorners, addCreases, divisions)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSweep : function(rail1, shapes, closed, addCorners, roadlikeFrame, roadlikeNormal, multiple=false) {\r\n      let url='rhino/geometry/subd/createfromsweep-nurbscurve_nurbscurvearray_bool_bool_bool_vector3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail1, shapes, closed, addCorners, roadlikeFrame, roadlikeNormal)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createFromSweep1 : function(rail1, rail2, shapes, closed, addCorners, multiple=false) {\r\n      let url='rhino/geometry/subd/createfromsweep-nurbscurve_nurbscurve_nurbscurvearray_bool_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, rail1, rail2, shapes, closed, addCorners)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    interpolateSurfacePoints : function(subd, surfacePoints, multiple=false) {\r\n      let url='rhino/geometry/subd/interpolatesurfacepoints-subd_point3darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, subd, surfacePoints)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n  },\r\n\r\n  Surface : {\r\n    createRollingBallFillet : function(surfaceA, surfaceB, radius, tolerance, multiple=false) {\r\n      let url='rhino/geometry/surface/createrollingballfillet-surface_surface_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surfaceA, surfaceB, radius, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createRollingBallFillet1 : function(surfaceA, flipA, surfaceB, flipB, radius, tolerance, multiple=false) {\r\n      let url='rhino/geometry/surface/createrollingballfillet-surface_bool_surface_bool_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surfaceA, flipA, surfaceB, flipB, radius, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createRollingBallFillet2 : function(surfaceA, uvA, surfaceB, uvB, radius, tolerance, multiple=false) {\r\n      let url='rhino/geometry/surface/createrollingballfillet-surface_point2d_surface_point2d_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surfaceA, uvA, surfaceB, uvB, radius, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createExtrusion : function(profile, direction, multiple=false) {\r\n      let url='rhino/geometry/surface/createextrusion-curve_vector3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, profile, direction)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createExtrusionToPoint : function(profile, apexPoint, multiple=false) {\r\n      let url='rhino/geometry/surface/createextrusiontopoint-curve_point3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, profile, apexPoint)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPeriodicSurface : function(surface, direction, multiple=false) {\r\n      let url='rhino/geometry/surface/createperiodicsurface-surface_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, direction)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createPeriodicSurface1 : function(surface, direction, bSmooth, multiple=false) {\r\n      let url='rhino/geometry/surface/createperiodicsurface-surface_int_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, direction, bSmooth)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    createSoftEditSurface : function(surface, uv, delta, uLength, vLength, tolerance, fixEnds, multiple=false) {\r\n      let url='rhino/geometry/surface/createsofteditsurface-surface_point2d_vector3d_double_double_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, uv, delta, uLength, vLength, tolerance, fixEnds)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    smooth : function(surface, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem, multiple=false) {\r\n      let url='rhino/geometry/surface/smooth-surface_double_bool_bool_bool_bool_smoothingcoordinatesystem'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    smooth1 : function(surface, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem, plane, multiple=false) {\r\n      let url='rhino/geometry/surface/smooth-surface_double_bool_bool_bool_bool_smoothingcoordinatesystem_plane'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, smoothFactor, bXSmooth, bYSmooth, bZSmooth, bFixBoundaries, coordinateSystem, plane)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    variableOffset : function(surface, uMinvMin, uMinvMax, uMaxvMin, uMaxvMax, tolerance, multiple=false) {\r\n      let url='rhino/geometry/surface/variableoffset-surface_double_double_double_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, uMinvMin, uMinvMax, uMaxvMin, uMaxvMax, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    variableOffset1 : function(surface, uMinvMin, uMinvMax, uMaxvMin, uMaxvMax, interiorParameters, interiorDistances, tolerance, multiple=false) {\r\n      let url='rhino/geometry/surface/variableoffset-surface_double_double_double_double_point2darray_doublearray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, uMinvMin, uMinvMax, uMaxvMin, uMaxvMax, interiorParameters, interiorDistances, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    getSurfaceSize : function(surface, multiple=false) {\r\n      let url='rhino/geometry/surface/getsurfacesize-surface_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    closestSide : function(surface, u, v, multiple=false) {\r\n      let url='rhino/geometry/surface/closestside-surface_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, u, v)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    extend : function(surface, edge, extensionLength, smooth, multiple=false) {\r\n      let url='rhino/geometry/surface/extend-surface_isostatus_double_bool'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, edge, extensionLength, smooth)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    rebuild : function(surface, uDegree, vDegree, uPointCount, vPointCount, multiple=false) {\r\n      let url='rhino/geometry/surface/rebuild-surface_int_int_int_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, uDegree, vDegree, uPointCount, vPointCount)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    rebuildOneDirection : function(surface, direction, pointCount, loftType, refitTolerance, multiple=false) {\r\n      let url='rhino/geometry/surface/rebuildonedirection-surface_int_int_lofttype_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, direction, pointCount, loftType, refitTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    closestPoint : function(surface, testPoint, multiple=false) {\r\n      let url='rhino/geometry/surface/closestpoint-surface_point3d_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, testPoint)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    localClosestPoint : function(surface, testPoint, seedU, seedV, multiple=false) {\r\n      let url='rhino/geometry/surface/localclosestpoint-surface_point3d_double_double_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, testPoint, seedU, seedV)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    offset : function(surface, distance, tolerance, multiple=false) {\r\n      let url='rhino/geometry/surface/offset-surface_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, distance, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    fit : function(surface, uDegree, vDegree, fitTolerance, multiple=false) {\r\n      let url='rhino/geometry/surface/fit-surface_int_int_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, uDegree, vDegree, fitTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    interpolatedCurveOnSurfaceUV : function(surface, points, tolerance, multiple=false) {\r\n      let url='rhino/geometry/surface/interpolatedcurveonsurfaceuv-surface_point2darray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, points, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    interpolatedCurveOnSurfaceUV1 : function(surface, points, tolerance, closed, closedSurfaceHandling, multiple=false) {\r\n      let url='rhino/geometry/surface/interpolatedcurveonsurfaceuv-surface_point2darray_double_bool_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, points, tolerance, closed, closedSurfaceHandling)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    interpolatedCurveOnSurface : function(surface, points, tolerance, multiple=false) {\r\n      let url='rhino/geometry/surface/interpolatedcurveonsurface-surface_point3darray_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, points, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    shortPath : function(surface, start, end, tolerance, multiple=false) {\r\n      let url='rhino/geometry/surface/shortpath-surface_point2d_point2d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, start, end, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    pushup : function(surface, curve2d, tolerance, curve2dSubdomain, multiple=false) {\r\n      let url='rhino/geometry/surface/pushup-surface_curve_double_interval'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, curve2d, tolerance, curve2dSubdomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    pushup1 : function(surface, curve2d, tolerance, multiple=false) {\r\n      let url='rhino/geometry/surface/pushup-surface_curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, curve2d, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    pullback : function(surface, curve3d, tolerance, multiple=false) {\r\n      let url='rhino/geometry/surface/pullback-surface_curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, curve3d, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    pullback1 : function(surface, curve3d, tolerance, curve3dSubdomain, multiple=false) {\r\n      let url='rhino/geometry/surface/pullback-surface_curve_double_interval'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surface, curve3d, tolerance, curve3dSubdomain)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n  },\r\n\r\n  Intersection : {\r\n    curvePlane : function(curve, plane, tolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/curveplane-curve_plane_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, plane, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    meshPlane : function(mesh, plane, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/meshplane-mesh_plane'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, plane)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    meshPlane1 : function(mesh, planes, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/meshplane-mesh_planearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, planes)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    brepPlane : function(brep, plane, tolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/brepplane-brep_plane_double_curvearray_point3darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, plane, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    curveSelf : function(curve, tolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/curveself-curve_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    curveCurve : function(curveA, curveB, tolerance, overlapTolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/curvecurve-curve_curve_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB, tolerance, overlapTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    curveCurveValidate : function(curveA, curveB, tolerance, overlapTolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/curvecurvevalidate-curve_curve_double_double_intarray_textlog'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curveA, curveB, tolerance, overlapTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    curveLine : function(curve, line, tolerance, overlapTolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/curveline-curve_line_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, line, tolerance, overlapTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    curveSurface : function(curve, surface, tolerance, overlapTolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/curvesurface-curve_surface_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, surface, tolerance, overlapTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    curveSurfaceValidate : function(curve, surface, tolerance, overlapTolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/curvesurfacevalidate-curve_surface_double_double_intarray_textlog'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, surface, tolerance, overlapTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    curveSurface1 : function(curve, curveDomain, surface, tolerance, overlapTolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/curvesurface-curve_interval_surface_double_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, curveDomain, surface, tolerance, overlapTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    curveSurfaceValidate1 : function(curve, curveDomain, surface, tolerance, overlapTolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/curvesurfacevalidate-curve_interval_surface_double_double_intarray_textlog'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, curveDomain, surface, tolerance, overlapTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    curveBrep : function(curve, brep, tolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/curvebrep-curve_brep_double_curvearray_point3darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, brep, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    curveBrep1 : function(curve, brep, tolerance, angleTolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/curvebrep-curve_brep_double_double_doublearray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, brep, tolerance, angleTolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    curveBrepFace : function(curve, face, tolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/curvebrepface-curve_brepface_double_curvearray_point3darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, curve, face, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    surfaceSurface : function(surfaceA, surfaceB, tolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/surfacesurface-surface_surface_double_curvearray_point3darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, surfaceA, surfaceB, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    brepBrep : function(brepA, brepB, tolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/brepbrep-brep_brep_double_curvearray_point3darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brepA, brepB, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    brepSurface : function(brep, surface, tolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/brepsurface-brep_surface_double_curvearray_point3darray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, brep, surface, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    meshMeshFast : function(meshA, meshB, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/meshmeshfast-mesh_mesh'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, meshA, meshB)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    meshMeshAccurate : function(meshA, meshB, tolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/meshmeshaccurate-mesh_mesh_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, meshA, meshB, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    meshRay : function(mesh, ray, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/meshray-mesh_ray3d'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, ray)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    meshRay1 : function(mesh, ray, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/meshray-mesh_ray3d_intarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, ray)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    meshPolyline : function(mesh, curve, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/meshpolyline-mesh_polylinecurve_intarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, curve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    meshPolylineSorted : function(mesh, curve, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/meshpolylinesorted-mesh_polylinecurve_intarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, curve)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    meshLine : function(mesh, line, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/meshline-mesh_line_intarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, line)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    meshLineSorted : function(mesh, line, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/meshlinesorted-mesh_line_intarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, mesh, line)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    rayShoot : function(ray, geometry, maxReflections, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/rayshoot-ray3d_geometrybasearray_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, ray, geometry, maxReflections)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    rayShoot1 : function(geometry, ray, maxReflections, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/rayshoot-geometrybasearray_ray3d_int'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, geometry, ray, maxReflections)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    projectPointsToMeshes : function(meshes, points, direction, tolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/projectpointstomeshes-mesharray_point3darray_vector3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, meshes, points, direction, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    projectPointsToMeshesEx : function(meshes, points, direction, tolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/projectpointstomeshesex-mesharray_point3darray_vector3d_double_intarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, meshes, points, direction, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    projectPointsToBreps : function(breps, points, direction, tolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/projectpointstobreps-breparray_point3darray_vector3d_double'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, breps, points, direction, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n\r\n    projectPointsToBrepsEx : function(breps, points, direction, tolerance, multiple=false) {\r\n      let url='rhino/geometry/intersect/intersection/projectpointstobrepsex-breparray_point3darray_vector3d_double_intarray'\r\n      if(multiple) url = url + '?multiple=true'\r\n      let args = RhinoCompute.zipArgs(multiple, breps, points, direction, tolerance)\r\n      let promise = RhinoCompute.computeFetch(url, args)\r\n      return promise\r\n    },\r\n  },\r\n  Python: {\r\n    pythonEvaluate : function(script, input, output){\r\n      let inputEncoded = rhino3dm.ArchivableDictionary.encodeDict(input)\r\n      let url = 'rhino/python/evaluate'\r\n      let args = [script, JSON.stringify(inputEncoded), output]\r\n      let result = RhinoCompute.computeFetch(url, args)\r\n      let objects = rhino3dm.ArchivableDictionary.decodeDict(JSON.parse(result))\r\n      return objects\r\n    }\r\n  }\r\n}\r\n\r\n// https://gist.github.com/jonleighton/958841\r\n/*\r\nMIT LICENSE\r\nCopyright 2011 Jon Leighton\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\nfunction base64ByteArray(bytes) {\r\n  var base64    = ''\r\n  var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\r\n\r\n  // var bytes         = new Uint8Array(arrayBuffer)\r\n\r\n  // strip bom\r\n  if (bytes[0] === 239 && bytes[1] === 187 && bytes[2] === 191)\r\n    bytes = bytes.slice(3)\r\n\r\n  var byteLength    = bytes.byteLength\r\n  var byteRemainder = byteLength % 3\r\n  var mainLength    = byteLength - byteRemainder\r\n\r\n  var a, b, c, d\r\n  var chunk\r\n\r\n  // Main loop deals with bytes in chunks of 3\r\n  for (var i = 0; i < mainLength; i = i + 3) {\r\n    // Combine the three bytes into a single integer\r\n    chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]\r\n\r\n    // Use bitmasks to extract 6-bit segments from the triplet\r\n    a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18\r\n    b = (chunk & 258048)   >> 12 // 258048   = (2^6 - 1) << 12\r\n    c = (chunk & 4032)     >>  6 // 4032     = (2^6 - 1) << 6\r\n    d = chunk & 63               // 63       = 2^6 - 1\r\n\r\n    // Convert the raw binary segments to the appropriate ASCII encoding\r\n    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]\r\n  }\r\n\r\n  // Deal with the remaining bytes and padding\r\n  if (byteRemainder == 1) {\r\n    chunk = bytes[mainLength]\r\n\r\n    a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2\r\n\r\n    // Set the 4 least significant bits to zero\r\n    b = (chunk & 3)   << 4 // 3   = 2^2 - 1\r\n\r\n    base64 += encodings[a] + encodings[b] + '=='\r\n  } else if (byteRemainder == 2) {\r\n    chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]\r\n\r\n    a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10\r\n    b = (chunk & 1008)  >>  4 // 1008  = (2^6 - 1) << 4\r\n\r\n    // Set the 2 least significant bits to zero\r\n    c = (chunk & 15)    <<  2 // 15    = 2^4 - 1\r\n\r\n    base64 += encodings[a] + encodings[b] + encodings[c] + '='\r\n  }\r\n\r\n  return base64\r\n}\r\n\r\n// NODE.JS\r\n\r\n// check if we're running in a browser or in node.js\r\nlet _is_node = typeof exports === 'object' && typeof module === 'object'\r\n\r\n// polyfills\r\nif (_is_node && typeof require === 'function')\r\n{\r\n  if (typeof fetch !== 'function')\r\n    fetch = require('node-fetch')\r\n}\r\n\r\n// export RhinoCompute object\r\nif (_is_node)\r\n  module.exports = RhinoCompute\r\n"],
  "mappings": "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",
  "names": []
}
